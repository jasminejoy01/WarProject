#[cfg(test)]
mod tests {
    
    use super::super::{*};
    use rand::thread_rng;
    use rand::seq::SliceRandom;

    const DECK: [u8; 52] = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13]; 

    const T01: [u8; 52] = [1,1,1,1,13,13,13,13,11,11,11,11,12,12,12,12,10,10,10,10,9,9,9,9,7,7,7,7,8,8,8,8,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2]; 
    const R01: [u8; 52] = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2];
    const T02: [u8; 52] = [1,13,1,13,1,13,1,13,12,11,12,11,12,11,12,11,10,9,10,9,10,9,10,9,8,7,8,7,8,7,8,7,6,5,6,5,6,5,6,5,4,3,4,3,4,3,4,3,2,2,2,2];
    const R02: [u8; 52] = [4,3,2,2,2,2,4,3,4,3,4,3,6,5,6,5,6,5,6,5,8,7,8,7,8,7,8,7,10,9,10,9,10,9,10,9,12,11,12,11,12,11,12,11,1,13,1,13,1,13,1,13];
    const T03: [u8; 52] = [13,1,13,1,13,1,13,1,11,12,11,12,11,12,11,12,9,10,9,10,9,10,9,10,7,8,7,8,7,8,7,8,5,6,5,6,5,6,5,6,3,4,3,4,3,4,3,4,2,2,2,2];
    const R03: [u8; 52] = [4,3,2,2,2,2,4,3,4,3,4,3,6,5,6,5,6,5,6,5,8,7,8,7,8,7,8,7,10,9,10,9,10,9,10,9,12,11,12,11,12,11,12,11,1,13,1,13,1,13,1,13];
    const T04: [u8; 52] = [10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9];
    const R04: [u8; 52] = [1,1,13,12,9,5,11,4,9,3,8,7,7,2,13,10,12,5,10,4,9,6,8,3,1,1,13,12,7,5,11,4,9,3,8,6,7,2,13,10,12,5,11,11,10,8,6,4,6,3,2,2];
    const T05: [u8; 52] = [1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13];
    const R05: [u8; 52] = [1,10,13,8,11,9,8,7,11,8,13,7,13,6,12,6,9,5,8,5,7,4,7,4,11,6,12,10,6,3,2,2,12,5,9,3,10,4,9,2,10,3,5,2,1,1,1,13,12,11,4,3];
    const T06: [u8; 52] = [2,3,3,3,2,2,3,2,5,4,5,4,5,4,5,4,7,6,7,6,7,6,7,6,9,8,9,8,9,8,9,8,11,10,11,10,11,10,11,10,13,12,13,12,1,12,1,12,1,13,1,13];
    const R06: [u8; 52] = [1,12,13,12,13,12,11,10,11,10,11,10,11,10,9,8,9,8,9,8,9,8,7,6,7,6,7,6,7,6,5,4,5,4,5,4,5,4,3,2,1,3,13,3,1,3,13,2,1,2,12,2];
    const T07: [u8; 52] = [10,6,3,11,9,13,12,4,7,1,1,13,2,7,6,10,8,2,4,12,11,8,4,9,3,3,2,10,5,8,5,13,6,4,7,1,12,9,3,5,2,13,9,11,12,7,6,5,1,11,10,8];
    const R07: [u8; 52] = [8,3,11,11,11,10,8,7,5,5,4,2,4,2,1,9,12,9,7,6,4,2,1,1,1,13,13,10,9,8,6,3,11,9,12,8,10,5,7,5,13,6,13,3,12,6,12,4,10,3,7,2];
    const T08: [u8; 52] = [9,9,8,5,13,8,3,6,10,9,5,9,7,1,6,1,3,11,8,10,2,5,10,4,1,12,7,3,4,13,5,11,2,11,1,7,12,6,8,7,13,13,2,4,2,4,12,11,3,12,6,10];
    const R08: [u8; 52] = [5,3,13,7,13,10,12,6,11,6,10,6,8,5,7,2,9,8,6,4,5,4,11,7,13,12,3,3,3,2,11,9,10,5,7,4,1,13,1,12,11,10,9,4,9,2,8,2,1,1,12,8];
    const T09: [u8; 52] = [13,3,11,2,5,1,9,3,12,11,11,8,6,8,9,6,13,6,1,4,5,3,10,11,13,7,7,5,13,4,3,10,10,12,4,10,4,5,8,8,2,1,9,2,7,9,12,1,7,12,2,6];
    const R09: [u8; 52] = [6,4,1,2,12,2,1,13,1,7,9,6,1,13,13,12,9,5,5,3,12,11,11,10,9,2,13,3,10,2,11,8,10,8,11,7,10,6,5,4,12,7,4,3,9,7,8,6,8,4,5,3];
    const T10: [u8; 52] = [11,8,3,8,4,5,13,6,10,4,9,13,2,6,12,12,1,3,2,8,4,5,11,5,8,12,6,5,9,4,10,10,6,10,11,2,1,2,3,7,11,13,13,1,12,9,1,7,7,9,7,3];
    const R10: [u8; 52] = [7,4,10,9,6,5,10,9,8,3,13,12,10,6,11,8,8,3,12,5,6,4,11,3,4,2,1,12,1,13,1,8,1,2,13,11,12,9,11,9,6,4,7,3,5,2,5,2,13,10,7,7];
    const T11: [u8; 52] = [10,2,3,4,12,7,6,3,5,5,10,6,4,1,3,5,13,5,12,7,3,2,6,11,1,8,13,8,2,11,1,4,11,12,11,1,9,4,7,10,12,13,13,6,8,10,9,2,8,9,7,9];
    const R11: [u8; 52] = [7,3,1,13,12,12,11,11,10,5,10,10,9,7,4,3,7,3,6,2,1,1,8,7,2,2,1,8,12,2,11,10,8,6,13,6,9,9,5,5,5,3,13,13,12,11,8,4,9,6,4,4];
    const T12: [u8; 52] = [13,9,11,4,7,6,12,2,10,8,5,9,11,6,10,3,13,8,2,4,10,8,11,1,4,6,12,7,1,5,1,13,2,3,12,1,5,9,2,3,4,3,11,7,5,12,8,13,6,9,7,10];
    const R12: [u8; 52] = [3,2,11,6,6,4,12,4,9,7,6,5,2,2,11,9,13,7,9,6,11,4,10,3,1,1,13,13,13,12,1,1,12,10,8,8,12,11,5,4,10,7,9,5,10,8,8,7,5,3,3,2];
    const T13: [u8; 52] = [1,2,1,2,1,2,1,2,3,4,3,4,3,4,3,4,5,6,5,6,5,6,5,6,7,8,7,8,7,8,7,8,9,10,9,10,9,10,9,10,11,12,11,12,11,12,11,12,13,13,13,13];
    const R13: [u8; 52] = [9,8,2,2,11,5,4,2,9,4,5,2,1,8,12,7,11,6,1,9,10,3,13,10,5,3,1,10,10,9,12,6,7,4,1,8,6,3,13,8,13,7,13,5,12,6,12,4,11,7,11,3];
    const T14: [u8; 52] = [7,4,1,2,1,8,8,1,2,2,10,10,12,6,9,10,3,13,11,7,12,7,10,3,9,11,5,4,8,13,7,2,9,4,11,6,12,11,8,9,1,12,5,13,3,5,4,6,6,13,3,5];
    const R14: [u8; 52] = [8,7,3,2,1,6,10,4,12,4,10,2,1,10,1,8,13,8,13,7,12,5,4,3,13,7,13,5,12,11,9,7,9,6,9,4,12,6,5,3,11,3,9,2,1,11,11,10,6,2,8,5];
    const T15: [u8; 52] = [8,7,3,2,1,6,10,4,12,4,10,2,1,10,1,8,13,8,13,7,12,5,4,3,13,7,13,5,12,11,9,7,9,6,9,4,12,6,5,3,11,3,9,2,1,11,11,10,6,2,8,5];
    const R15: [u8; 52] = [8,5,6,2,11,10,1,11,9,2,11,3,5,3,12,6,9,4,9,6,9,7,12,11,13,5,13,7,4,3,12,5,13,7,13,8,1,8,1,10,10,2,12,4,10,4,1,6,3,2,8,7];
    const T16: [u8; 52] = [12,10,11,9,13,9,8,6,12,9,7,5,1,5,7,3,10,3,6,2,10,9,5,3,4,2,1,1,13,12,10,5,6,2,1,8,11,8,4,4,3,2,13,11,12,7,6,4,13,8,11,7];
    const R16: [u8; 52] = [11,7,13,8,6,4,12,7,13,11,3,2,1,11,8,8,4,4,6,2,10,5,13,12,1,1,5,4,3,2,10,9,6,2,10,3,7,3,1,5,7,5,12,9,8,6,13,9,11,9,12,10];
    const T17: [u8; 52] = [13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1];
    const R17: [u8; 52] = [1,9,13,7,13,6,12,11,11,8,4,3,11,6,9,2,9,8,8,5,9,5,8,2,1,10,12,7,13,10,7,5,11,6,6,4,1,12,5,3,13,10,4,3,1,10,4,2,12,7,3,2];
    const T18: [u8; 52] = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13];
    const R18: [u8; 52] = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2];
    const T19: [u8; 52] = [13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2,1,1,1,1];
    const R19: [u8; 52] = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2];
    const T20: [u8; 52] = [1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13,13];
    const R20: [u8; 52] = [5,2,9,6,1,6,11,4,10,5,9,3,13,5,11,3,1,4,12,2,7,2,3,2,1,13,13,11,10,10,13,12,12,9,7,4,1,7,10,4,11,5,6,3,12,9,8,8,8,8,7,6];

    #[test] fn shuf01() { assert_eq!(deal(&T01), R01); }
    #[test] fn shuf02() { assert_eq!(deal(&T02), R02); }
    #[test] fn shuf03() { assert_eq!(deal(&T03), R03); }
    #[test] fn shuf04() { assert_eq!(deal(&T04), R04); }
    #[test] fn shuf05() { assert_eq!(deal(&T05), R05); }
    #[test] fn shuf06() { assert_eq!(deal(&T06), R06); }
    #[test] fn shuf07() { assert_eq!(deal(&T07), R07); }
    #[test] fn shuf08() { assert_eq!(deal(&T08), R08); }
    #[test] fn shuf09() { assert_eq!(deal(&T09), R09); }
    #[test] fn shuf10() { assert_eq!(deal(&T10), R10); }
    #[test] fn shuf11() { assert_eq!(deal(&T11), R11); }
    #[test] fn shuf12() { assert_eq!(deal(&T12), R12); }
    #[test] fn shuf13() { assert_eq!(deal(&T13), R13); }
    #[test] fn shuf14() { assert_eq!(deal(&T14), R14); }
    #[test] fn shuf15() { assert_eq!(deal(&T15), R15); }
    #[test] fn shuf16() { assert_eq!(deal(&T16), R16); }
    #[test] fn shuf17() { assert_eq!(deal(&T17), R17); }
    #[test] fn shuf18() { assert_eq!(deal(&T18), R18); }
    #[test] fn shuf19() { assert_eq!(deal(&T19), R19); }
    #[test] fn shuf20() { assert_eq!(deal(&T20), R20); }
    
    #[test] fn massPerm() { assert_eq!(perm(500), 500); }

    fn perm(n: u32) -> u32
    {
        let mut rng = thread_rng();
        let mut shuf = Vec::from(DECK);
        let mut shuf_arr: [u8; 52] = [0; 52];
        let mut deck = Vec::from(DECK);
        deck.sort();
        let mut passed = 0;
        for _ in 0..n {
            shuf.shuffle(&mut rng);
            for i in 0..52 { shuf_arr[i] = shuf[i]; }
            let mut res = Vec::from(deal(&shuf_arr));
            res.sort();
            if res == deck { passed += 1 }
        }
        passed
    }

}

