t01 = [1,1,1,1,13,13,13,13,11,11,11,11,12,12,12,12,10,10,10,10,9,9,9,9,7,7,7,7,8,8,8,8,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2]
r01 = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2]
t02 = [1,13,1,13,1,13,1,13,12,11,12,11,12,11,12,11,10,9,10,9,10,9,10,9,8,7,8,7,8,7,8,7,6,5,6,5,6,5,6,5,4,3,4,3,4,3,4,3,2,2,2,2] 
r02 = [4,3,2,2,2,2,4,3,4,3,4,3,6,5,6,5,6,5,6,5,8,7,8,7,8,7,8,7,10,9,10,9,10,9,10,9,12,11,12,11,12,11,12,11,1,13,1,13,1,13,1,13] 
t03 = [13,1,13,1,13,1,13,1,11,12,11,12,11,12,11,12,9,10,9,10,9,10,9,10,7,8,7,8,7,8,7,8,5,6,5,6,5,6,5,6,3,4,3,4,3,4,3,4,2,2,2,2] 
r03 = [4,3,2,2,2,2,4,3,4,3,4,3,6,5,6,5,6,5,6,5,8,7,8,7,8,7,8,7,10,9,10,9,10,9,10,9,12,11,12,11,12,11,12,11,1,13,1,13,1,13,1,13] 
t04 = [10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9] 
r04 = [1,1,13,12,9,5,11,4,9,3,8,7,7,2,13,10,12,5,10,4,9,6,8,3,1,1,13,12,7,5,11,4,9,3,8,6,7,2,13,10,12,5,11,11,10,8,6,4,6,3,2,2] 
t05 = [1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13] 
r05 = [1,10,13,8,11,9,8,7,11,8,13,7,13,6,12,6,9,5,8,5,7,4,7,4,11,6,12,10,6,3,2,2,12,5,9,3,10,4,9,2,10,3,5,2,1,1,1,13,12,11,4,3] 
t06 = [2,3,3,3,2,2,3,2,5,4,5,4,5,4,5,4,7,6,7,6,7,6,7,6,9,8,9,8,9,8,9,8,11,10,11,10,11,10,11,10,13,12,13,12,1,12,1,12,1,13,1,13]
r06 = [1,12,13,12,13,12,11,10,11,10,11,10,11,10,9,8,9,8,9,8,9,8,7,6,7,6,7,6,7,6,5,4,5,4,5,4,5,4,3,2,1,3,13,3,1,3,13,2,1,2,12,2]
t07 = [10,6,3,11,9,13,12,4,7,1,1,13,2,7,6,10,8,2,4,12,11,8,4,9,3,3,2,10,5,8,5,13,6,4,7,1,12,9,3,5,2,13,9,11,12,7,6,5,1,11,10,8]
r07 = [8,3,11,11,11,10,8,7,5,5,4,2,4,2,1,9,12,9,7,6,4,2,1,1,1,13,13,10,9,8,6,3,11,9,12,8,10,5,7,5,13,6,13,3,12,6,12,4,10,3,7,2]
t08 = [9,9,8,5,13,8,3,6,10,9,5,9,7,1,6,1,3,11,8,10,2,5,10,4,1,12,7,3,4,13,5,11,2,11,1,7,12,6,8,7,13,13,2,4,2,4,12,11,3,12,6,10]
r08 = [5,3,13,7,13,10,12,6,11,6,10,6,8,5,7,2,9,8,6,4,5,4,11,7,13,12,3,3,3,2,11,9,10,5,7,4,1,13,1,12,11,10,9,4,9,2,8,2,1,1,12,8]
t09 = [13,3,11,2,5,1,9,3,12,11,11,8,6,8,9,6,13,6,1,4,5,3,10,11,13,7,7,5,13,4,3,10,10,12,4,10,4,5,8,8,2,1,9,2,7,9,12,1,7,12,2,6]
r09 = [6,4,1,2,12,2,1,13,1,7,9,6,1,13,13,12,9,5,5,3,12,11,11,10,9,2,13,3,10,2,11,8,10,8,11,7,10,6,5,4,12,7,4,3,9,7,8,6,8,4,5,3]
t10 = [11,8,3,8,4,5,13,6,10,4,9,13,2,6,12,12,1,3,2,8,4,5,11,5,8,12,6,5,9,4,10,10,6,10,11,2,1,2,3,7,11,13,13,1,12,9,1,7,7,9,7,3]
r10 = [7,4,10,9,6,5,10,9,8,3,13,12,10,6,11,8,8,3,12,5,6,4,11,3,4,2,1,12,1,13,1,8,1,2,13,11,12,9,11,9,6,4,7,3,5,2,5,2,13,10,7,7]
t11 = [10,2,3,4,12,7,6,3,5,5,10,6,4,1,3,5,13,5,12,7,3,2,6,11,1,8,13,8,2,11,1,4,11,12,11,1,9,4,7,10,12,13,13,6,8,10,9,2,8,9,7,9]
r11 = [7,3,1,13,12,12,11,11,10,5,10,10,9,7,4,3,7,3,6,2,1,1,8,7,2,2,1,8,12,2,11,10,8,6,13,6,9,9,5,5,5,3,13,13,12,11,8,4,9,6,4,4]
t12 = [13,9,11,4,7,6,12,2,10,8,5,9,11,6,10,3,13,8,2,4,10,8,11,1,4,6,12,7,1,5,1,13,2,3,12,1,5,9,2,3,4,3,11,7,5,12,8,13,6,9,7,10]
r12 = [3,2,11,6,6,4,12,4,9,7,6,5,2,2,11,9,13,7,9,6,11,4,10,3,1,1,13,13,13,12,1,1,12,10,8,8,12,11,5,4,10,7,9,5,10,8,8,7,5,3,3,2]
t13 = [1,2,1,2,1,2,1,2,3,4,3,4,3,4,3,4,5,6,5,6,5,6,5,6,7,8,7,8,7,8,7,8,9,10,9,10,9,10,9,10,11,12,11,12,11,12,11,12,13,13,13,13]
r13 = [9,8,2,2,11,5,4,2,9,4,5,2,1,8,12,7,11,6,1,9,10,3,13,10,5,3,1,10,10,9,12,6,7,4,1,8,6,3,13,8,13,7,13,5,12,6,12,4,11,7,11,3]
t14 = [7,4,1,2,1,8,8,1,2,2,10,10,12,6,9,10,3,13,11,7,12,7,10,3,9,11,5,4,8,13,7,2,9,4,11,6,12,11,8,9,1,12,5,13,3,5,4,6,6,13,3,5]
r14 = [8,7,3,2,1,6,10,4,12,4,10,2,1,10,1,8,13,8,13,7,12,5,4,3,13,7,13,5,12,11,9,7,9,6,9,4,12,6,5,3,11,3,9,2,1,11,11,10,6,2,8,5]
t15 = [8,7,3,2,1,6,10,4,12,4,10,2,1,10,1,8,13,8,13,7,12,5,4,3,13,7,13,5,12,11,9,7,9,6,9,4,12,6,5,3,11,3,9,2,1,11,11,10,6,2,8,5]
r15 = [8,5,6,2,11,10,1,11,9,2,11,3,5,3,12,6,9,4,9,6,9,7,12,11,13,5,13,7,4,3,12,5,13,7,13,8,1,8,1,10,10,2,12,4,10,4,1,6,3,2,8,7]
t16 = [12,10,11,9,13,9,8,6,12,9,7,5,1,5,7,3,10,3,6,2,10,9,5,3,4,2,1,1,13,12,10,5,6,2,1,8,11,8,4,4,3,2,13,11,12,7,6,4,13,8,11,7]
r16 = [11,7,13,8,6,4,12,7,13,11,3,2,1,11,8,8,4,4,6,2,10,5,13,12,1,1,5,4,3,2,10,9,6,2,10,3,7,3,1,5,7,5,12,9,8,6,13,9,11,9,12,10]
t17 = [13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1]
r17 = [1,9,13,7,13,6,12,11,11,8,4,3,11,6,9,2,9,8,8,5,9,5,8,2,1,10,12,7,13,10,7,5,11,6,6,4,1,12,5,3,13,10,4,3,1,10,4,2,12,7,3,2]
t18 = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13]
r18 = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2]
t19 = [13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2,1,1,1,1]
r19 = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2]
t20 = [1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13,13]
r20 = [5,2,9,6,1,6,11,4,10,5,9,3,13,5,11,3,1,4,12,2,7,2,3,2,1,13,13,11,10,10,13,12,12,9,7,4,1,7,10,4,11,5,6,3,12,9,8,8,8,8,7,6]

### -----------------------------------------------------------------------
### FUNCTIONS
### -----------------------------------------------------------------------
def split_alternatively(arr):
    array1 = []
    array2 = []
    for i, element in enumerate(arr):
        if i % 2 == 0:
            array1.append(element)
        else:
            array2.append(element)
    return array1, array2

def replace_value(lst, old_value, new_value):
    return [new_value if x == old_value else x for x in lst]

def pull_cards(set1, set2, new_array):
  #print(set1)
  #print(set2)
  #print(new_array)
  #print(len(set1), len(set2), len(new_array))
  if len(set1) == 0 or len(set2) == 0:
      if len(set1) == 0:
          set2 = set2 + new_array
          set2 = replace_value(set2, 14, 1)
          #print(set2)
          #print(len(set1), len(set2), len(new_array))
          return set2
      else:
          set1 = set1 + new_array
          set1 = replace_value(set1, 14, 1)
          #print(set1)
          #print(len(set1), len(set2), len(new_array))
          return set1

  elif len(set1) > 3 and len(set2) > 3:
    index = 0
    if set1[index] < set2[index]:
      new_array = new_array + set1[index:index + 1] + set2[index:index + 1]
      new_array = sorted(new_array, reverse=True)
      return pull_cards(set1[index + 1:], set2[index + 1:] + new_array, [])
    elif set1[index] > set2[index]:
      new_array = new_array + set1[index:index + 1] + set2[index:index + 1]
      new_array = sorted(new_array, reverse=True)
      return pull_cards(set1[index + 1:] + new_array, set2[index + 1:], [])
    else:
      index = 2
      new_array = sorted(new_array + set1[:index] + set2[:index], reverse=True)
      return pull_cards(set1[index:], set2[index:], new_array)

  else:
      #print("in here")
      index = 0
      if set1[index] < set2[index]:
          new_array = sorted(new_array + set1[index:index + 1] + set2[index:index + 1], reverse=True)
          return pull_cards(set1[index + 1:], set2[index + 1:] + new_array, [])
      elif set1[index] > set2[index]:
          new_array = sorted(new_array + set1[index:index + 1] + set2[index:index + 1], reverse=True)
          return pull_cards(set1[index + 1:] + new_array, set2[index + 1:], [])
      else:
          if len(set1) == 1 or len(set2) == 1:
            new_array = sorted(new_array + set1[index:index + 1] + set2[index:index + 1], reverse=True)
            return pull_cards(set1[index + 1:], set2[index + 1:], new_array)
          else:
            index = 2
            new_array = sorted(new_array + set1[:index] + set2[:index], reverse=True)
            return pull_cards(set1[index:], set2[index:], new_array)

### ----------------------------------------------------------------------------------------
### INITIALIZE
### ----------------------------------------------------------------------------------------
sets = (split_alternatively(replace_value(t01[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t01: ", result == r01)

sets = (split_alternatively(replace_value(t02[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t02: ", result == r02)

sets = (split_alternatively(replace_value(t03[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t03: ", result == r03)
#print(r11)

sets = (split_alternatively(replace_value(t04[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t04: ", result == r04)

sets = (split_alternatively(replace_value(t05[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t05: ", result == r05)

sets = (split_alternatively(replace_value(t06[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t06: ", result == r06)

sets = (split_alternatively(replace_value(t07[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t07: ", result == r07)

sets = (split_alternatively(replace_value(t08[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t08: ", result == r08)
#print(r11)

sets = (split_alternatively(replace_value(t09[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t09: ", result == r09)

sets = (split_alternatively(replace_value(t10[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t10: ", result == r10)

sets = (split_alternatively(replace_value(t11[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t11: ", result == r11)

sets = (split_alternatively(replace_value(t12[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t12: ", result == r12)

sets = (split_alternatively(replace_value(t13[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t13: ", result == r13)

sets = (split_alternatively(replace_value(t14[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t14: ", result == r14)
#print(r11)

sets = (split_alternatively(replace_value(t15[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t15: ", result == r15)

sets = (split_alternatively(replace_value(t16[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t16: ", result == r16)

sets = (split_alternatively(replace_value(t17[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t17: ", result == r17)
#print(r11)

sets = (split_alternatively(replace_value(t18[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t18: ", result == r18)

sets = (split_alternatively(replace_value(t19[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t19: ", result == r19)

sets = (split_alternatively(replace_value(t20[::-1], 1, 14)))
result = (pull_cards(sets[0], sets[1], []))
print("t20: ", result == r20)
